# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LhtY2A_ZDNOje2stNs8pD2kZolmJugbE

File name: RR_LAB3

Name: Rohit Vaibhav Raut

Course: 611

Date: 02/27/2022

Program description: Program for KNN Class (task 1)

---


**KNN CLASS file**

Header Files:
"""

import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import statistics

"""Euclidean Formula:"""

def euclidean(array1, array2):
  a = np.array(array1)
  b = np.array(array2)
  dist = np.sqrt(np.sum(np.square(a-b)))
  return(dist)

"""QuickSort Method:"""

def quicksort(array,a):
  if len(array) == 0:
    return array
  else:
    pivot = array[0]
    lesser = quicksort([x for x in array[1:] if x[a] < pivot[a]], a)
    greater = quicksort([x for x in array[1:] if x[a] >= pivot[a]], a)
    return lesser + [pivot] + greater

"""Manhattan Formula:"""

def manhattan(array1, array2):
    distance = 0
    for array1_i,array2_i in zip(array1,array2):
        distance += abs(array1_i - array2_i)
    return(distance)

"""Minkowski Formula:"""

def minkowski(array1, array2, p):
  d = np.sum(np.power(np.abs(array1-array2),p))
  d1 = np.power(d, 1/p)
  d2 = np.round(d1,3)
  return d2

"""KNN class is as follows:"""

def knnBuild(model, k, algorithm = "euclidean", p=2):
  knn =KNN(model, k, algorithm,p)
  return knn

class KNN():
  def __init__(self, model, k, algorithm, p=2):
    self.model = model
    self.k = k
    self.algorithm = algorithm
    self.p = p

  def knnFit(self, X_train, y_train):
	  self.X_train = X_train
	  self.y_train = y_train
  
  def knnPredict(self, X_test):
    classifier = []
    regression = []
    for y in X_test:
      distance = []
      distance1 = []
      target = []
      id = 0
      for x in self.X_train:
        if self.algorithm == "euclidean":
          dist1 = euclidean(y, x)
        elif self.algorithm == "manhattan":
          dist1 = manhattan(y, x)
        elif self.algorithm == "minkowski":
          dist1 = minkowski(y, x, self.p)
        distance.append([id,dist1])
        id+=1
      distance=quicksort(distance,1)
      for i in range(self.k):
        distance1.append(distance[i][0])
      for j in distance1:
        target.append(self.y_train[j])
      regression.append(statistics.mean(target))
    return(regression)